#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var fs = require('fs');
var path = require('path');
var recursive = require("recursive-readdir");
var async = require('async');
var mongoose = require('mongoose');
var HTMLParser = require('node-html-parser');
mongoose.connect('mongodb://localhost:27017/LuanVan2019DB', { useNewUrlParser: true });
var alarmMongoose = require('../model/alarm');
var historyMongoose = require('../model/history');

var databasePath = '../Server/Database';
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
global.io = require('socket.io')(server);

/* MQTT */
var mqtt = require('mqtt');
var mqttClient = mqtt.connect('mqtt://localhost:1883');



mqttClient.on('connect', function () {
  console.log('Connected to MQTT broker');

  mqttClient.subscribe('/+/status', function (err) {
    if (err) console.log(err);
    else console.log('Subscribed topic : ' + '/*/status');
  });

  mqttClient.subscribe('/+/tags', function (err) {
    if (err) console.log(err);
    else console.log('Subscribed topic : ' + '/*/tags');
  });

  mqttClient.subscribe('/+/alarm', function (err) {
    if (err) console.log(err);
    else console.log('Subscribed topic : ' + '/*/alarm');
  });


});

mqttClient.on('message', function (topic, message) {
  if (topic.endsWith('status')) {
    var statusObject = JSON.parse(message.toString());
    if (statusObject) {
      console.log(statusObject.deviceID);
      recursive(databasePath, function (err, files) {
        if (err) throw err;
        console.log(files);
        for (var file of files) {
          if (file.includes(statusObject.deviceID + '.json')) {
            var filePath = file;
            fs.readFile(filePath, function (err, data) {
              if (err) throw err;
              var object = JSON.parse(data);
              object.status = statusObject.status;
              object.lastActive = statusObject.timestamp;
              //console.log(object);
              fs.writeFile(filePath, JSON.stringify(object, null, 4), function (err) {
                if (err) console.log(err);
                else console.log('Write success in ' + filePath);
              });
            });
            break;
          }
        }
      });
      io.emit('/' + statusObject.deviceID + '/status', message.toString());
    }
  }

  if (topic.endsWith('tags')) {
    var variableObj = JSON.parse(message.toString());
    io.emit('/' + variableObj.deviceID + '/tag', message.toString());

    if (variableObj.variables) {
      variableObj.variables.forEach(function (_var) {
        if (_var.isHistory) {
          var historyModel = historyMongoose.createModel('Device_' + variableObj.deviceID + '_history');
          var _newHistory = new historyModel({
            tag: _var.tagName,
            type: _var.dataType,
            address: _var.address,
            value: _var.value,
            timestamp: _var.timestamp
          });
          historyMongoose.createNewHistory(_newHistory);
        }
      });
    }
  }

  if (topic.endsWith('alarm')) {
    var alarmObject = JSON.parse(message.toString());
    io.emit('/' + alarmObject.deviceID + '/alarm', alarmObject);
    //Save to mongo
    var alarmModel = alarmMongoose.createModel('Device_' + alarmObject.deviceID + '_alarm');
    var _newAlarm = new alarmModel({
      source: alarmObject.source,
      value: alarmObject.value,
      message: alarmObject.message,
      type: alarmObject.type,
      state: alarmObject.state,
      timestamp: alarmObject.timestamp,
    });
    alarmMongoose.createNewAlarm(_newAlarm);

  }
});



/**
 * Listen on provided port, on all network interfaces.
 */

io.on('connection', function (socket) {

  socket.on('/reqDeviceConfig', function (user) {
    var arrConfig = [];
    var userFolder = path.resolve(databasePath, user);
    async.series([
      function (callback) {
        var fileList = fs.readdirSync(userFolder);
        if (fileList.length > 0) {
          fileList.forEach(function (file) {
            if (path.extname(file) == '.json')
              arrConfig.push(JSON.parse(fs.readFileSync(path.resolve(userFolder, file))))
          });
        }
        callback();
      }
    ], function (err) {
      if (err) console.log(err);
      else socket.emit('/' + user + '/resDeviceConfig', arrConfig);
    });
  });

  socket.on('deviceConfig', function (data) {
    console.log(data);
    if (data) {
      var receivedObject = JSON.parse(data);
      if (receivedObject) {
        receivedObject.fileName = 'deviceConfig_' + receivedObject.deviceID + '.json';
        receivedObjectJSON = JSON.stringify(receivedObject, null, 4);
        var filePath = path.resolve(databasePath, receivedObject.user, 'deviceConfig_' + receivedObject.deviceID + '.json');

        fs.writeFile(filePath, receivedObjectJSON, function (err) {
          if (err) console.log(err);
          else console.log('Succeed');
        });

        //Send configuration to gateway via MQTT
        var configObject = {
          command: 'set',
          value: receivedObjectJSON,
        }
        mqttClient.publish('/' + receivedObject.deviceID + '/config', JSON.stringify(configObject, null, 4));
      }
    }
  });

  socket.on('deleteDevice', function (filePath) {
    fs.unlink(path.resolve(databasePath, filePath), function (err) {
      if (err) console.log(err)
      else socket.emit('deleteSuccess', 1);
    });
  });

  socket.on('/write', function (rcvJson) {
    var rcvObj = JSON.parse(rcvJson);
    mqttClient.publish('/' + rcvObj.deviceID + '/write', rcvObj.command);
  });

  socket.on('/resAlarm', function (alarmObject) {
    console.log(alarmObject);
    mqttClient.publish('/' + alarmObject.deviceID + '/resAlarm', JSON.stringify(alarmObject, null, 4));
  });

  socket.on('/reqHistory', function (_id) {
    var historyModel = historyMongoose.createModel('Device_' + _id + '_history');
    historyModel.find({}, {_id : 0 , __v : 0} ,function (err , results) { 
      socket.emit('/' + _id + '/resHistory' , results);
    });
  });

  socket.on('/publish' , function(dataObj) {
    var template = fs.readFileSync('../Server/views/publish-template.ejs').toString();
    var htlmObject = HTMLParser.parse(template);
    htlmObject.querySelector('#mainPage1').appendChild(dataObj.html);
    var fileName = 'Device_' + dataObj.deviceID + '_publish.ejs';
    fs.writeFileSync(path.resolve(databasePath, dataObj.user , fileName) , htlmObject);
    socket.emit('/publishSuccess' , 1);
  })

});
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//Function

