#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var fs = require('fs');
var path = require('path');
var recursive = require("recursive-readdir");


var databasePath = 'C:\\Users\\UX410\\Documents\\NodeJS\\LVTN2018\\Server\\Database';
let arrConfig = [];
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
global.io = require('socket.io')(server);

 /* MQTT */
 var mqtt = require('mqtt');
 var mqttClient = mqtt.connect('mqtt://localhost:1883');



 mqttClient.on('connect', function () {
   console.log('Connected to MQTT broker');

   mqttClient.subscribe('/+/status' , function (err) { 
    if (err) throw err;
    console.log('Subscribed topic : ' + '/*/status');
  });

  mqttClient.subscribe('/+/tags' , function (err) { 
    if (err) throw err;
    console.log('Subscribed topic : ' + '/*/tags');
  });
 });

 mqttClient.on('message', function (topic, message) {
  if (topic.endsWith('status')) {
    var statusObject = JSON.parse(message.toString());
    if (statusObject) {
      console.log(statusObject.deviceID);
      recursive(databasePath, function (err, files) {
        if (err) throw err;
        console.log(files);
         for ( var file of files) {
           if (file.includes(statusObject.deviceID + '.json')) {
             var filePath = file;
             fs.readFile(filePath , function (err , data) { 
               if (err) throw err;
               var object = JSON.parse(data);
               object.status = statusObject.status;
               object.lastActive = statusObject.timestamp;
               //console.log(object);
               fs.writeFile( filePath , JSON.stringify(object , null , 4) , function (err) { 
                 if (err) throw err;
                 console.log('Write success in ' +   filePath);
               });
             });
             break;
           }
         }
      });
      io.emit('/' + statusObject.deviceID + '/status' , message.toString());
    } 
  }

  if (topic.endsWith('tags')) {
    console.log('Topic : ' + topic + ' - Message : ' + message.toString());
    variableObj = JSON.parse(message.toString());
    io.emit('/' + variableObj.deviceID + '/tag' , message.toString());
  }


});


/**
 * Listen on provided port, on all network interfaces.
 */

io.on('connection', function (socket) {
  socket.on('deviceConfig', function (data) {
    console.log(data);
    if (data) {
      var receivedObject = JSON.parse(data);
      if (receivedObject) {
        receivedObject.fileName = 'deviceConfig_' + receivedObject.deviceID + '.json';
        receivedObjectJSON = JSON.stringify(receivedObject, null, 4);
        var filePath = path.resolve(databasePath, receivedObject.user, 'deviceConfig_' + receivedObject.deviceID + '.json');

        fs.writeFile(filePath, receivedObjectJSON, function (err) {
          if (err) throw err;
          console.log('Succeed');
        });

        //Send configuration to gateway via MQTT
        var configObject = {
          command : 'set',
          value : receivedObjectJSON,
        }
        mqttClient.publish('/' + receivedObject.deviceID + '/config',JSON.stringify(configObject,null,4));

        // //Subscribe topic /deviceID/status to get gateway status
        // mqttClient.subscribe('/' + receivedObject.deviceID + '/status', function (err) {
        //   if (err) throw err;
        //   console.log('Subscribed topic : ' + '/' + receivedObject.deviceID + '/status');
        // });

        // //Subscribe topic /deviceID/tags to get variable values
        // mqttClient.subscribe('/' + receivedObject.deviceID + '/tags' , function(err) {
        //   if (err) throw err;
        //   console.log('Subscribed topic : ' + '/' + receivedObject.deviceID + '/tags');
        // })

      }
    }
  });

  socket.on('reqDeviceConfig', function (user) {
    console.log(user);
    readConfigFiles(user).then(() => {
      socket.emit('/' + user + '/resDeviceConfig', arrConfig);
      arrConfig = [];
    });
  });

  socket.on('deleteDevice', function (filePath) {
    fs.unlink(path.resolve(databasePath, filePath), function (err) {
      if (err) throw err;
      socket.emit('deleteSuccess', 1);
    });
  });

});
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//Function

//Read config files
var readConfigFiles = async (user) => {
  var userFolder = path.resolve(databasePath, user);
  await readFiles();
  function readFiles() {
    fs.readdir(userFolder, function (err, files) {
      if (err) throw err;
      if (files.length > 0) {
        files.forEach(function (file) {
          if (path.extname(file) == '.json') {
            fs.readFile(path.resolve(userFolder, file), function (err, data) {
              if (err) throw err;
              arrConfig.push(JSON.parse(data));
            });
          }
        });
      }
    });
  };
}

